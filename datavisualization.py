# -*- coding: utf-8 -*-
"""DataVisualization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dxLXoB3qHicvmXxAj7Vz1MdW2m2CPBQI

### Day 1
"""

import pandas as pd

def columns_with_missing_data(dataset):
    return dataset.columns[dataset.isnull().any()].tolist()

"""### Day 2"""

import pandas as pd

def correct_data(Data):
  try:
    Data_final=Data.fillna(Data.mean())
    print(Data_final)
  except:

    for column in Data.select_dtypes(include=["object","category"]):
      mode_value=Data[column].mode()[0]
      data[column].fillna(mode_value,inplace=True)
      return data



def find_categorical_variables(dataset):
  categorical_variables=dataset.select_dtypes(include=["object","category"]).columns.tolist()
  return categorical_variables



Data=pd.read_csv("/content/sample_data/california_housing_train.csv")
correct_data(Data)
print(find_categorical_variables(Data))

"""### Day 3"""

import pandas as pd
from sklearn.preprocessing import LabelEncoder

def find_categorical_variables(dataset):
  categorical_variables=dataset.select_dtypes(include=["object","category"]).columns.tolist()
  return categorical_variables

def correct_data(Data,is_mean=False,is_mode=False,is_median=False,is_forward_propagate=False,is_backward_propagate=False):
  categorical_cols = Data.select_dtypes(include=["object","category"]).columns
  label_encoder1=LabelEncoder()
  for col in categorical_cols:
    Data[col+"_encoded"]=label_encoder1.fit_transform(Data[col])

  if (is_mean==True):
    Data_final=Data.fillna(Data.mean())
    return Data_final
  elif (is_mode==True):
    mode_val=Data.mode().iloc[0]
    Data_final=Data.fillna(mode_val)
    return Data_final
  elif (is_median==True):
    Data_final=Data.fillna(Data.median)
    return Data_final
  elif(is_forward_propagate==True):
    Data_final=Data.fillna(method="ffill")
    return Data_final
  elif (is_backward_propagate==True):
    Data_final=Data.fillna(method="bfill")
    return Data_final




Data_i=pd.read_csv("/content/sample_data/california_housing_train.csv")
Data=pd.DataFrame(Data_i)
print(correct_data(Data,is_forward_propagate=True))
print(find_categorical_variables(Data))

"""### Day 4"""

import pandas as pd
from sklearn.preprocessing import LabelEncoder

def find_categorical_variables(dataset):
  categorical_variables=dataset.select_dtypes(include=["object","category"]).columns.tolist()
  return categorical_variables

def correct_data(Data,is_mean=False,is_mode=False,is_median=False,is_forward_propagate=False,is_backward_propagate=False):
  categorical_cols = Data.select_dtypes(include=["object","category"]).columns
  label_encoder1=LabelEncoder()
  for col in categorical_cols:
    Data[col+"_encoded"]=label_encoder1.fit_transform(Data[col])

  if (is_mean==True):
    Data_final=Data.fillna(Data.mean())
    return Data_final
  elif (is_mode==True):
    mode_val=Data.mode().iloc[0]
    Data_final=Data.fillna(mode_val)
    return Data_final
  elif (is_median==True):
    Data_final=Data.fillna(Data.median)
    return Data_final
  elif(is_forward_propagate==True):
    Data_final=Data.fillna(method="ffill")
    return Data_final
  elif (is_backward_propagate==True):
    Data_final=Data.fillna(method="bfill")
    return Data_final
def low_correlation_columns(data,threshold=0.2):
  correlation_matrix=data.corr().abs()

  low_corr_columns=[]
  for col in correlation_matrix.columns:
    correlations = correlation_matrix[col].drop(col)

    if all(correlations < threshold):
      low_corr_columns.append(col)
  return low_corr_columns



Data_i=pd.read_csv("/content/sample_data/california_housing_train.csv")
Data=pd.DataFrame(Data_i)
print(correct_data(Data,is_forward_propagate=True))
print(find_categorical_variables(Data))

